<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>View Books</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f2f5f9;
    }

    .book-card-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-top: 20px;
      min-height: 400px;
    }

    .book-card {
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      width: 220px;
      transition: transform 0.3s;
    }

    .book-card:hover {
      transform: translateY(-5px);
    }

    .book-card img {
      width: 100%;
      height: 280px;
      object-fit: cover;
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
    }

    .card-content {
      padding: 10px 15px;
    }

    .book-card h5 {
      font-size: 18px;
      margin: 5px 0;
      color: #2c3e50;
    }

    .book-card p {
      font-size: 14px;
      color: #555;
      margin: 2px 0;
    }

    .actions {
      display: flex;
      justify-content: space-between;
      padding: 10px 15px 15px;
    }

    .actions a {
      text-decoration: none;
      font-weight: bold;
    }

    .update-link {
      color: #2980b9;
    }

    .delete-link {
      color: #e74c3c;
    }

    @media (max-width: 768px) {
      .book-card-container {
        justify-content: center;
      }

      .book-card {
        width: 90%;
      }
    }

    .search-bar {
      margin-top: 20px;
      margin-bottom: 20px;
    }

    .pagination {
      margin-top: 20px;
      display: flex;
      justify-content: center;
      gap: 10px;
    }

    .pagination button {
      border: none;
      padding: 5px 12px;
      background-color: #2980b9;
      color: #fff;
      border-radius: 5px;
      cursor: pointer;
    }

    .pagination button.active {
      background-color: #2ecc71;
    }

    .pagination button:disabled {
      background-color: #ccc;
      cursor: default;
    }
    .bookcount{
      margin-top: 35px;
      font-weight: bold;
      color: black;
    }

    /* Search Filter Styles */
    .search-filter {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-top: 20px;
  margin-bottom: 30px;
  background: #ffffff;
  padding: 15px 20px;
  border-radius: 12px;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.05);
  flex-wrap: wrap;
}

.search-filter label {
  font-weight: 600;
  color: #333;
  margin-bottom: 0;
  font-size: 16px;
}

.search-filter select,
.search-filter input {
  padding: 10px 14px;
  border: 1px solid #ccc;
  border-radius: 8px;
  font-size: 15px;
  transition: border-color 0.3s;
}

.search-filter select:focus,
.search-filter input:focus {
  border-color: #2980b9;
  outline: none;
}

.search-filter button {
  padding: 10px 18px;
  background: linear-gradient(to right, #2980b9, #3498db);
  color: #fff;
  font-weight: 600;
  font-size: 15px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.3s;
}

.search-filter button:hover {
  background: linear-gradient(to right, #2471a3, #1f618d);
}

  </style>
</head>
<body>

  <div class="p-4" style="flex-grow: 1;">
    <h3 class="bookcount">All Books (<%= books.length %>)</h3>

    <!-- Search Filter Section -->
    <div class="search-filter">
      <label for="searchType">Search By:</label>
      <select id="searchType">
        <option value="all">All Search</option>
        <option value="author">Search by Author</option>
        <option value="category">Search by Category</option>
        <option value="title">Search by Title</option>
      </select>
      <input type="text" id="searchInput" placeholder="Search...">
      <button onclick="searchBooks()">Search</button>
    </div>

    <!-- Book Cards -->
    <div class="book-card-container" id="bookContainer">
      <% books.forEach(book => { %>
        <div class="book-card" 
             data-title="<%= book.title.toLowerCase() %>" 
             data-author="<%= book.author.toLowerCase() %>" 
             style="display: none;">
          <img src="/uploads/<%= book.image %>" alt="<%= book.title %>">
          <div class="card-content">
            <h5><%= book.title %></h5>
            <p><strong>Author:</strong> <%= book.author %></p>
            <p><strong>Category:</strong> <%= book.category_name %></p>
            <!-- <p><strong>Available:</strong> <%= book.available_copies %> / <%= book.total_copies %></p> -->
            <p><strong>Status:</strong> <%= book.status %></p>
          </div>
          <!-- <div class="actions">
            <a href="/updatebook?id=<%= book.id %>" class="update-link">Update</a>
            <a href="/deletebook?id=<%= book.id %>" class="delete-link">Delete</a>
          </div> -->
        </div>
      <% }); %>
    </div>

    <!-- Pagination Buttons -->
    <div class="pagination" id="paginationContainer"></div>
  </div>

  <script>
    const searchInput = document.getElementById("searchInput");
    const bookCards = Array.from(document.querySelectorAll(".book-card"));
    const bookContainer = document.getElementById("bookContainer");
    const paginationContainer = document.getElementById("paginationContainer");
    const itemsPerPage = 5;
    let filteredCards = [...bookCards];
    let currentPage = 1;

    function showPage(page, items) {
      const start = (page - 1) * itemsPerPage;
      const end = start + itemsPerPage;

      items.forEach((card, index) => {
        card.style.display = (index >= start && index < end) ? "block" : "none";
      });

      updatePaginationButtons(items.length, page);
    }

    function updatePaginationButtons(totalItems, activePage) {
      const totalPages = Math.ceil(totalItems / itemsPerPage);
      paginationContainer.innerHTML = "";

      for (let i = 1; i <= totalPages; i++) {
        const btn = document.createElement("button");
        btn.textContent = i;
        btn.className = i === activePage ? "active" : "";
        btn.onclick = () => {
          currentPage = i;
          showPage(currentPage, filteredCards);
        };
        paginationContainer.appendChild(btn);
      }
    }

    function filterCards(query) {
      query = query.toLowerCase();
      filteredCards = bookCards.filter(card => {
        const title = card.getAttribute("data-title");
        const author = card.getAttribute("data-author");
        return title.includes(query) || author.includes(query);
      });

      currentPage = 1;
      showPage(currentPage, filteredCards);
    }

    searchInput.addEventListener("input", function () {
      filterCards(this.value);
    });

    // Initial load
    filterCards("");

    // Search functionality
    function searchBooks() {
  const type = document.getElementById('searchType').value;
  const query = document.getElementById('searchInput').value.trim();

  // Redirect to a search route with query params
  window.location.href = `/viewAllBookLoginUser?type=${type}&q=${encodeURIComponent(query)}`;
}
  </script>

</body>
</html>